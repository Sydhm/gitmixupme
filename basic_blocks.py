import torch
import torch.nn as nn
from torch.nn import init
import math
import warnings
import pickle

from torch import Tensor

def copy_weights(net, weight_path):
    with torch.no_grad():
        with open(weight_path, "rb") as fp:
            list = pickle.load(fp)
        # print("ok")
        for weight_item, param in zip(list, (p for p in net.parameters() if p.requires_grad)):
        # counter = 0
        # for weight_item, param in zip(list, net):
        # for weight_item in list:
            # print(len(weight_item.shape))
            if len(weight_item.shape)==4:
                # print('len(weight_item.shape)==4:', len(weight_item.shape)==4)
                # print(weight_item.shape, param.size())
                param.copy_(nn.parameter.Parameter(torch.from_numpy(weight_item).cuda().permute(3,2,0,1)))
                # print(weight_item[2][3][0][12], param[12, 0, 2, 3])
                # quit()
            else:
                param.weight = torch.from_numpy(weight_item).cuda()

            # counter+=1
        # print("????", param.is_cuda)
    # print(param1)
    # print("ok")
    # print(next(net.parameters()).is_cuda)




def init_weights(net, init_type='trunc_normal', init_gain=0.02):
    """Initialize network weights.
    Parameters:
        net (network)   -- network to be initialized
        init_type (str) -- the name of an initialization method: normal | xavier | kaiming | orthogonal
        init_gain (float)    -- scaling factor for normal, xavier and orthogonal.
    We use 'normal' in the original pix2pix and CycleGAN paper. But xavier and kaiming might
    work better for some applications. Feel free to try yourself.
    """
    def init_func(m):  # define the initialization function
        classname = m.__class__.__name__
        if hasattr(m, 'weight') and (classname.find('Conv') != -1 or classname.find('Linear') != -1):
            if init_type == 'normal':
                init.normal_(m.weight.data, 0.0, init_gain)
            elif init_type == 'xavier':
                init.xavier_normal_(m.weight.data, gain=init_gain)
            elif init_type == 'kaiming':
                init.kaiming_normal_(m.weight.data, a=0, mode='fan_in')
            elif init_type == 'orthogonal':
                init.orthogonal_(m.weight.data, gain=init_gain)
            elif init_type == 'trunc_normal':
                trunc_normal_(m.weight.data, 0.0, init_gain)
            else:
                raise NotImplementedError('initialization method [%s] is not implemented' % init_type)
            if hasattr(m, 'bias') and m.bias is not None:
                init.constant_(m.bias.data, 0.0)
        elif classname.find('BatchNorm2d') != -1:  # BatchNorm Layer's weight is not a matrix; only normal distribution applies.
            init.constant_(m.running_mean, 0.0)
            init.constant_(m.running_var, 1.0)
            init.constant_(m.weight.data, 1.0)
            init.constant_(m.bias.data, 0.0)
        elif classname.find('InstanceNorm2d') != -1:  # InstanceNorm Layer's weight is not a matrix; only normal distribution applies.
            init.constant_(m.weight.data, 1.0)
            init.constant_(m.bias.data, 0.0)

    print('initialize network with %s' % init_type)
    net.apply(init_func)  # apply the initialization function <init_func>

def trunc_normal_(tensor: Tensor, mean: float = 0., std: float = 1., a: float = -2., b: float = 2.) -> Tensor:
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)

def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor

class ResnetBlock(nn.Module):
    """Define a Resnet block"""

    def __init__(self, dim, padding_type, norm_layer, use_dropout=False, is_GA=False):
        """Initialize the Resnet block
        A resnet block is a conv block with skip connections
        We construct a conv block with build_conv_block function,
        and implement skip connections in <forward> function.
        Original Resnet paper: https://arxiv.org/pdf/1512.03385.pdf
        """
        super(ResnetBlock, self).__init__()
        use_bias = False
        if is_GA:
            use_bias = True
        self.conv_block = self.build_conv_block(dim, padding_type, norm_layer, use_dropout, use_bias)

    def build_conv_block(self, dim, padding_type, norm_layer, use_dropout, use_bias):
        """Construct a convolutional block.
        Parameters:
            dim (int)           -- the number of channels in the conv layer.
            padding_type (str)  -- the name of padding layer: reflect | replicate | zero
            norm_layer          -- normalization layer
            use_dropout (bool)  -- if use dropout layers.
            use_bias (bool)     -- if the conv layer uses bias or not
        Returns a conv block (with a conv layer, a normalization layer, and a non-linearity layer (ReLU))
        """
        if norm_layer == nn.InstanceNorm2d:
            eps = 1e-6
        else:
            eps = 0.001
        
        conv_block = []
        p = 0
        if padding_type == 'reflect':
            conv_block += [nn.ReflectionPad2d(1)]
        elif padding_type == 'replicate':
            conv_block += [nn.ReplicationPad2d(1)]
        elif padding_type == 'zero':
            p = 1
        else:
            raise NotImplementedError('padding [%s] is not implemented' % padding_type)

        conv_block += [nn.Conv2d(dim, dim, kernel_size=3, padding=p, bias=use_bias), norm_layer(dim, affine=True, eps=eps), nn.ReLU(True)]
        if use_dropout:
            conv_block += [nn.Dropout(0.5)]

        p = 0
        if padding_type == 'reflect':
            conv_block += [nn.ReflectionPad2d(1)]
        elif padding_type == 'replicate':
            conv_block += [nn.ReplicationPad2d(1)]
        elif padding_type == 'zero':
            p = 1
        else:
            raise NotImplementedError('padding [%s] is not implemented' % padding_type)
        conv_block += [nn.Conv2d(dim, dim, kernel_size=3, padding=p, bias=use_bias), norm_layer(dim, affine=True, eps=eps)]

        return nn.Sequential(*conv_block)

    def forward(self, x):
        """Forward function (with skip connections)"""
        out = nn.functional.relu(x + self.conv_block(x))  # add skip connections
        return out

class ResnetBlock_ds(nn.Module):
    """Define a Resnet block"""

    def __init__(self, dim, padding_type, norm_layer, use_dropout=False):
        super(ResnetBlock_ds, self).__init__()
        self.padding_type = padding_type
        self.norm_layer = norm_layer

        use_dropout = False
        use_bias = norm_layer == nn.InstanceNorm2d
        if norm_layer == nn.InstanceNorm2d:
            eps = 1e-6
        else:
            eps = 0.001

        conv_block = []
        p = 0
        if self.padding_type == 'reflect':
            conv_block += [nn.ReflectionPad2d(1)]
        elif self.padding_type == 'replicate':
            conv_block += [nn.ReplicationPad2d(1)]
        elif self.padding_type == 'zero':
            p = 1
        else:
            raise NotImplementedError('padding [%s] is not implemented' % self.padding_type)


        conv_block += [nn.Conv2d(int(dim/2), dim, kernel_size=3, padding=p, bias=use_bias), self.norm_layer(dim, affine=True, eps=eps), nn.ReLU(True)]
        if use_dropout:
            conv_block += [nn.Dropout(0.5)]

        p = 0
        if self.padding_type == 'reflect':
            conv_block += [nn.ReflectionPad2d(1)]
        elif self.padding_type == 'replicate':
            conv_block += [nn.ReplicationPad2d(1)]
        elif self.padding_type == 'zero':
            p = 1
        else:
            raise NotImplementedError('padding [%s] is not implemented' % padding_type)
        conv_block += [nn.Conv2d(dim, dim, kernel_size=3, padding=p, bias=use_bias), self.norm_layer(dim, affine=True, eps=eps)]

        self.conv_block=nn.Sequential(*conv_block)


    def forward(self, x):
        # dim = self.dim/2
        i_n, i_c, i_h, i_w = x.size()

        if x.is_cuda is True:
            channel_pads = torch.zeros((i_n, (i_c*2 - i_c) // 2, i_h, i_w), device=torch.device('cuda'))
            inputres = torch.cat((channel_pads, x, channel_pads), 1)
        else:
            channel_pads = torch.zeros(i_n, (i_c*2 - i_c) // 2, i_h, i_w)
            inputres = torch.cat((channel_pads, x, channel_pads), 1)

        return  nn.functional.relu(self.conv_block(x)+inputres)

class DRN_block(nn.Module):
    def __init__(self, in_dim, out_dim, norm_layer):
        super(DRN_block, self).__init__()
        if norm_layer == nn.InstanceNorm2d:
            eps = 1e-6
        else:
            eps = 0.001


        module = [nn.ZeroPad2d(2),
                  nn.Conv2d(in_dim, out_dim, 3, dilation= 2),
                  norm_layer(out_dim, affine=True, eps=eps),
                  nn.ReLU()]

        module += [nn.ZeroPad2d(2),
                   nn.Conv2d(out_dim, out_dim, 3, dilation= 2),
                   norm_layer(out_dim, affine=True, eps=eps)]

        #out_drn = drn(out_drn)

        self.block = nn.Sequential(*module)
    def forward(self, x):
        out_drn = self.block(x)
        inputdrn = x

        return nn.functional.relu(out_drn + x)
